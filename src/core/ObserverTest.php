<?php

namespace Wtf\Core;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 12:56:15.
 */
class ObserverTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Observer
	 */
	protected static $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Wtf\Core\Observer::notify
	 */
	public function testNotify() {
		$stub = $this->getMockForAbstractClass(\Wtf\Core\Observer::class);
		$record = new \stdClass();
		$event = Event::_('some/event');

		$stub->expects($this->any())
			->method('onEvent')
			->will($this->returnCallback(function() use($record) {
					$record->name = 'onEvent';
					$record->args = func_get_args();
				}));

		$this->assertSame($stub, $stub->notify($event));
		$this->assertEquals('onEvent', $record->name);
		$this->assertSame($event, $record->args[0]);
		$this->assertEquals(['some', 'event'], $record->args[1]);

		$stub->expects($this->any())
			->method('onEvent_some')
			->will($this->returnCallback(function() use($record) {
					$record->name = 'onEvent_some';
					$record->args = func_get_args();
				}));

		$this->assertSame($stub, $stub->notify($event));
		$this->assertEquals('onEvent_some', $record->name);
		$this->assertSame($event, $record->args[0]);
		$this->assertEquals(['event'], $record->args[1]);
	}

	/**
	 * @covers Wtf\Core\Observer::enable
	 * @todo   Implement testEnable().
	 */
	public function testEnable() {
		$stub = $this->getMockForAbstractClass(\Wtf\Core\Observer::class);

		$this->assertSame($stub, $stub->enable('some'));
	}

	/**
	 * @covers Wtf\Core\Observer::disable
	 * @todo   Implement testDisable().
	 */
	public function testDisable() {
		$stub = $this->getMockForAbstractClass(\Wtf\Core\Observer::class);

		$this->assertSame($stub, $stub->disable('some'));
	}

}
