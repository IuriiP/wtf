<?php

namespace Wtf\Dataset;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-27 at 10:09:57.
 */
class ConditionTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Condition
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Wtf\Dataset\Condition::__construct
	 */
	public function testConstruct() {
		$obj = new Condition();
		$this->assertInstanceOf(Condition::class, $obj);
		
		$obj = new Condition(['a',['b']]);

		return $obj;
	}

	/**
	 * @covers Wtf\Dataset\Condition::__toString
	 * @depends testConstruct
	 */
	public function testGlue($obj) {

		$this->assertEquals('and', (string) $obj);

		$obj = new Condition('glue');
		$this->assertEquals('glue', (string) $obj);

		return $obj;
	}

	/**
	 * @covers Wtf\Dataset\Condition::__invoke
	 * @depends testGlue
	 */
	public function testAppend($obj) {
		$obj('test');
		$obj($some = new Condition('some'));
		$obj(['other' => 'a', ['b', 1], ['c', '!=',2], ['d', 'oPer', 3], ['e', 'between', [4,5]] ]);

		$this->assertEquals(3, iterator_count($obj));

		foreach($obj as $key => $value) {
			switch($key) {
				case 0:
					$this->assertEquals(['test', 'eq', true], $value);
					break;
				case 1:
					$this->assertSame($some, $value);
					$this->assertEquals('some', (string) $value);
					break;
				case 3:
					$this->assertInstanceOf(Condition::class, $value);
					$this->assertEquals('other', (string) $value);
					$this->assertEquals(['a', 'eq', true], current($value));
					next($value);
					$this->assertEquals(['b', 'eq', 1], current($value));
					next($value);
					$this->assertEquals(['c', 'ne', 2], current($value));
					next($value);
					$this->assertEquals(['d', 'oper', 3], current($value));
					next($value);
					$this->assertEquals(['e', 'bw', [4,5]], current($value));
					break;
				default:
					break;
			}
		}
	}

	/**
	 * @covers Wtf\Dataset\Condition::__call
	 * @covers Wtf\Dataset\Condition::__get
	 */
	public function testCall() {
		$obj = new Condition();

		$obj->testing('test1');
		$this->assertEquals(['test1'], $obj->testing);
		$obj->testing('test2');
		$this->assertEquals(['test1','test2'], $obj->testing);
		$obj->testing('test3');
		$this->assertEquals(['test1','test2','test3'], $obj->testing);
	}

	/**
	 * @covers Wtf\Dataset\Condition::__callStatic
	 */
	public function testCallStatic() {
		$obj = Condition::having();
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

}
