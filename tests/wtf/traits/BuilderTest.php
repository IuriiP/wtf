<?php

namespace Wtf\Traits;

class BuilderMock {

	use Builder;

	public $args = [];

	public function __construct() {
		$this->args = func_get_args();
	}

}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-27 at 10:15:56.
 */
class BuilderTest extends \PHPUnit_Framework_TestCase {

	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Wtf\Traits\Builder::_
	 */
	public function testBuilder() {
		$mock = BuilderMock::_(2, 'a', true);

		$this->assertInstanceOf('\\Wtf\\Traits\\BuilderMock', $mock);
		$this->assertEquals([2, 'a', true], $mock->args);
	}

	/**
	 * @covers Wtf\Traits\Builder::__call
	 * @covers Wtf\Traits\Builder::__get
	 */
	public function testCall_Get() {
		$mock = BuilderMock::_();

		$this->assertSame($mock, $mock->data(999));
		$this->assertEquals([999], $mock->data);
		$this->assertSame($mock, $mock->data(333));
		$this->assertEquals([999,333], $mock->data);

		$this->assertSame($mock, $mock->data());
		$this->assertNull($mock->data);

		$this->assertSame($mock, $mock->data(1, true, 'string'));
		$this->assertEquals([1, true, 'string'], $mock->data);
	}

}
