<?php

namespace Wtf\Traits;

class AdaptiveFactoryMock implements \Wtf\Interfaces\AdaptiveFactory {

	use AdaptiveFactory;

	public static function guess_string() {
		return 'guess_string(' . join(', ', array_map(function($arg) {
					return gettype($arg);
				}, func_get_args())) . ')';
	}

	public static function guess_integer() {
		return 'guess_integer(' . join(', ', array_map(function($arg) {
					return gettype($arg);
				}, func_get_args())) . ')';
	}

	public static function guess_integer_string() {
		return 'guess_integer_string(' . join(', ', array_map(function($arg) {
					return gettype($arg);
				}, func_get_args())) . ')';
	}

	public static function guess_boolean() {
		return 'guess_boolean(' . join(', ', array_map(function($arg) {
					return gettype($arg);
				}, func_get_args())) . ')';
	}

	public static function guess_boolean_integer_string() {
		return 'guess_boolean_integer_string(' . join(', ', array_map(function($arg) {
					return gettype($arg);
				}, func_get_args())) . ')';
	}

}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-27 at 10:15:56.
 */
class AdaptiveFactoryTest extends \PHPUnit_Framework_TestCase {

	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Wtf\Traits\AdaptiveFactory::produce
	 */
	public function testAdaptiveFactory() {
		$mock = new AdaptiveFactoryMock();

		$this->assertInstanceOf(AdaptiveFactoryMock::class, $mock);
		$this->assertEquals('guess_string(string)', $mock::produce('foo'));
		$this->assertEquals('guess_integer_string(integer, string)', $mock::produce(42, 'foo'));
		$this->assertEquals('guess_boolean_integer_string(boolean, integer, string)', $mock::produce(true, 42, 'foo'));
		$this->assertEquals('guess_boolean(boolean, double, string)', $mock::produce(true, 42.42, 'foo'));
		$this->assertEquals('guess_string(string, integer)', $mock::produce('foo', 42));
		$this->assertEquals('guess_integer_string(integer, string, integer)', $mock::produce(999, 'foo', 42));
		$this->assertEquals('guess_boolean_integer_string(boolean, integer, string, object)', $mock::produce(false, 42, 'foo', new \stdClass()));
	}

}
