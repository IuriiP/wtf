<?php

namespace Wtf\Traits;

class CollectionMock implements \Wtf\Interfaces\Collection {

	use Collection;

}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-02-10 at 13:21:01.
 */
class CollectionTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Collection
	 */
	protected $object;
	
	private $fixture = [
		'foo',
		'bar',
		'baz',
		'foo',
		'bar',
		'baz',
	];

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new CollectionMock;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Wtf\Traits\Collection::add
	 * @covers Wtf\Traits\Collection::count
	 */
	public function testAddCount() {
		$this->assertEquals(0,$this->object->count());
		$this->assertEquals(0,count($this->object));

		$this->object->add('foo');
		$this->assertEquals(1,count($this->object));
		$this->object->add('bar');
		$this->assertEquals(2,count($this->object));
	}

	/**
	 * @covers Wtf\Traits\Collection::current
	 * @covers Wtf\Traits\Collection::key
	 * @covers Wtf\Traits\Collection::next
	 * @covers Wtf\Traits\Collection::rewind
	 * @covers Wtf\Traits\Collection::valid
	 */
	public function testIterator() {
		$this->assertEquals(0,count($this->object));
		
		foreach($this->fixture as $val) {
			$this->object->add($val);
		}
		
		$this->assertEquals(count($this->fixture),count($this->object));

		foreach($this->object as $key=>$val) {
			$this->assertEquals($key,$this->object->key());
			$this->assertEquals($val, $this->object->current());
			$this->assertEquals($this->fixture[$key],$val);
		}

		$this->assertFalse($this->object->valid());
		$this->assertTrue($this->object->rewind());
		$this->assertTrue($this->object->valid());
		$this->assertEquals('foo',$this->object->current());
		$this->assertEquals(0,$this->object->key());
	}

}
