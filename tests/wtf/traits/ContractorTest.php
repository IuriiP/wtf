<?php

namespace Wtf\Traits;

class ContractorMock implements \Wtf\Interfaces\Contractor {

	use Contractor;
}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-02-10 at 15:29:49.
 */
class ContractorTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Contractor
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Wtf\Traits\Contractor::contract
	 */
	public function testContract() {
		$object = new ContractorMock();

		$this->assertInstanceOf(ContractorMock::class, $object);
		$this->assertEquals('bar', ContractorMock::contract('foo', 'bar'));
		$this->assertEquals('bar', ContractorMock::contract('foo'));
		$this->assertNull(ContractorMock::contract('baz'));

		return $object;
	}

	/**
	 * @depends testContract
	 * @covers Wtf\Traits\Contractor::__call
	 * @expectedException ErrorException
	 * @expectedExceptionMessage Wrong arguments list
	 */
	public function test__call($object) {
		$this->assertInstanceOf(ContractorMock::class, $object);
		$this->assertEquals('bar', $object->foo());
		$this->assertNull($object->baz);

		$object->foo(123, 456);
	}

	/**
	 * @depends testContract
	 * @covers Wtf\Traits\Contractor::__callStatic
	 * @expectedException ErrorException
	 * @expectedExceptionMessage Object 'Wtf\Traits\ContractorMock' must implements the 'Singleton' pattern
	 */
	public function test__callStatic($object) {
		$this->assertEquals('bar', ContractorMock::foo());
		$this->assertNull(ContractorMock::baz());

		ContractorMock::foo(123, 456);
	}

	/**
	 * @depends testContract
	 * @covers Wtf\Traits\Contractor::__get
	 */
	public function test__get($object) {
		$this->assertEquals('bar', $object->foo);
		$this->assertNull($object->baz);
	}

	/**
	 * @depends testContract
	 * @covers Wtf\Traits\Contractor::__isset
	 */
	public function test__isset($object) {
		$this->assertTrue(isset($object->foo));
		$this->assertFalse(isset($object->baz));
	}

	/**
	 * @depends testContract
	 * @covers Wtf\Traits\Contractor::__set
	 * @expectedException ErrorException
	 * @expectedExceptionMessage readonly
	 */
	public function test__set($object) {
		$object->fuzz = 'qwe';
	}

	/**
	 * @depends testContract
	 * @covers Wtf\Traits\Contractor::__unset
	 * @expectedException ErrorException
	 * @expectedExceptionMessage readonly
	 */
	public function test__unset($object) {
		$this->assertTrue(isset($object->foo));
		unset($object->foo);
		$this->assertFalse(isset($object->foo));
		$this->assertNull($object->foo);
		$object->foo();
	}

}
