<?php

namespace Wtf\Dataset;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-08-04 at 11:11:41.
 */
class PredicateTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Predicate
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Wtf\Dataset\Predicate::construct
	 */
	public function testEmpty() {
		$obj = new Predicate('some');
		$this->assertEquals('some', (string) $obj);
		$this->assertEmpty($obj->getIterator());
	}

	/**
	 * @covers Wtf\Dataset\Predicate::construct
	 */
	public function testScalar() {
		$obj = new Predicate('some', 'arg');
		$this->assertEquals('some', (string) $obj);
		$this->assertEquals(['arg'], (array) $obj->getIterator());
	}

	/**
	 * @covers Wtf\Dataset\Predicate::construct
	 */
	public function testArray() {
		$obj = new Predicate('some', [1, 2, 3]);
		$this->assertEquals('some', (string) $obj);
		$this->assertEquals([1, 2, 3], (array) $obj->getIterator());
	}

	/**
	 * @covers Wtf\Dataset\Predicate::_
	 */
	public function testCreator() {
		$obj = Predicate::_('some', [1, 2, 3]);
		$this->assertInstanceOf(Predicate::class, $obj);
		$this->assertEquals('some', (string) $obj);
		$this->assertEquals([1, 2, 3], (array) $obj->getIterator());
	}

	/**
	 * @covers Wtf\Dataset\Predicate::__invoke
	 */
	public function testInvoke() {
		$obj = Predicate::_('some', [
				1,
				Predicate::_('sub', 2),
				3
		]);

		$clone = $obj(function($data) {
			return "over {$data}";
		});

		$this->assertNotSame($obj, $clone);
		$this->assertEquals('some', (string) $obj);
		$this->assertContains(1, (array) $obj->getIterator());
		$this->assertContains('over 1', (array) $clone->getIterator());

		foreach($clone as $value) {
			if($value instanceof Predicate) {
				$this->assertEquals('sub', (string) $value);
				$this->assertEquals(['over 2'], (array)$value->getIterator());
			}
		}
	}

}
