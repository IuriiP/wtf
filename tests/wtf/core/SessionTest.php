<?php

namespace Wtf\Core;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-02-17 at 11:48:18.
 */
class SessionTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Session
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = Session::singleton();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Wtf\Core\Session::singleton
	 */
	public function testSingleton() {
		$object = Session::singleton();
		$this->assertSame($this->object, $object);

		return $object;
	}

	/**
	 * @depends testSingleton
	 * @covers Wtf\Core\Session::offsetSet
	 * @covers Wtf\Core\Session::offsetExists
	 * @covers Wtf\Core\Session::offsetGet
	 * @covers Wtf\Core\Session::offsetUnset
	 */
	public function testOffset($object) {
		$this->assertFalse(isset($object['foo']));
		$object['foo'] = 42;
		$this->assertTrue(isset($object['foo']));
		$this->assertEquals(42, $object['foo']);

		$this->assertFalse(isset($object['bar']));
		$bar = new \stdClass();
		$bar->baz = 'xyz';
		$object['bar'] = $bar;
		$this->assertTrue(isset($object['bar']));
		$this->assertEquals($bar, $object['bar']);

		unset($object['bar']);
		$this->assertFalse(isset($object['bar']));
	}

	/**
	 * @depends testSingleton
	 * @covers Wtf\Core\Session::flush
	 */
	public function testFlush($object) {
		unset($object['foo']);
		$this->assertFalse(isset($object['foo']));
		$object->flush('foo', 42);
		$this->assertTrue(isset($object['foo']));
		$this->assertEquals(42, $object['foo']);
		$this->assertFalse(isset($object['foo']));
	}

	/**
	 * @depends testSingleton
	 * @covers Wtf\Core\Session::__invoke
	 */
	public function test__invoke($object) {
		$object['foo'] = 42;
		$object['bar'] = true;
		$object['baz'] = 'quux';

		$this->assertSame($object, $object());
		$this->assertEquals(42, $object('foo'));
		$this->assertEquals(['bar' => true, 'baz' => 'quux'], $object('bar', 'nil', 'baz'));
	}

}
