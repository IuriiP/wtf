<?php

namespace Wtf\Core;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-03-02 at 11:59:52.
 */
class InputFileTest extends \PHPUnit_Framework_TestCase {

	protected $temp = null;
	/**
	 * @var InputFile
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->temp = tempnam(sys_get_temp_dir(), 'upload');
		file_put_contents($this->temp, 'Lorem Ipsum');
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		if($this->temp) {
			unlink($this->temp);
		}
	}

	public function test__construct() {
		$object = new InputFile([
			'name' => 'original_name.txt',
			'type' => 'text/plain',
			'size' => 11,
			'error' => 42,
			'tmp_name' => $this->temp,
			]
		);
		
		$this->assertInstanceOf(InputFile::class,$object);
		$this->assertAttributeEquals([
			'name' => 'original_name.txt',
			'type' => 'text/plain',
			'size' => 11,
			'error' => 42,
			'tmp_name' => $this->temp,
		], '_descriptor', $object);
	}

	/**
	 * @covers Wtf\Core\InputFile::__toString
	 */
	public function test__toString() {
		$object = new InputFile([
			'name' => 'original_name.txt',
			'type' => 'text/plain',
			'size' => 11,
			'error' => 0,
			'tmp_name' => $this->temp,
			]
		);
		$this->assertEquals('Lorem Ipsum',(string) $object);
	}

	/**
	 * @covers Wtf\Core\InputFile::__toString
	 */
	public function test__toStringErr1() {
		$object = new InputFile([
			'name' => 'original_name.txt',
			'type' => 'text/plain',
			'size' => 11,
			'error' => 42,
			'tmp_name' => $this->temp,
			]
		);
		$this->assertEmpty((string) $object);
	}

	/**
	 * @covers Wtf\Core\InputFile::__toString
	 */
	public function test__toStringErr2() {
		$object = new InputFile([
			'name' => 'original_name.txt',
			'type' => 'text/plain',
			'size' => 11,
			'error' => 0,
			'tmp_name' => 'not_exists.temp',
			]
		);
		$this->assertEmpty((string) $object);
	}

	/**
	 * @covers Wtf\Core\InputFile::store
	 */
	public function testStore1() {
		$object = new InputFile([
			'name' => 'original_name.txt',
			'type' => 'text/plain',
			'size' => 11,
			'error' => 0,
			'tmp_name' => $this->temp,
			]
		);
		$dest = sys_get_temp_dir();
		$filename = $object->store($dest);
		$this->assertTrue(file_exists($filename));
		$this->assertEquals(1,preg_match('#'.  preg_quote(DIRECTORY_SEPARATOR). 'original_name\\.txt$#',$filename));
		unlink($filename);
	}

	/**
	 * @covers Wtf\Core\InputFile::store
	 */
	public function testStore2() {
		$object = new InputFile([
			'name' => 'original_name.txt',
			'type' => 'text/plain',
			'size' => 11,
			'error' => 0,
			'tmp_name' => $this->temp,
			]
		);
		$dest = sys_get_temp_dir();
		$filename = $object->store($dest,'new_name.txt');
		$this->assertTrue(file_exists($filename));
		$this->assertEquals(1,preg_match('#'.  preg_quote(DIRECTORY_SEPARATOR). 'new_name\\.txt$#',$filename));
		unlink($filename);
	}

	/**
	 * @covers Wtf\Core\InputFile::store
	 */
	public function testStore3() {
		$object = new InputFile([
			'name' => 'original_name.txt',
			'type' => 'text/plain',
			'size' => 11,
			'error' => 0,
			'tmp_name' => $this->temp,
			]
		);
		$dest = sys_get_temp_dir();
		$filename = $object->store($dest,true);
		$this->assertTrue(file_exists($filename));
		$this->assertEquals(1,preg_match('#'.  preg_quote(DIRECTORY_SEPARATOR). '\d+\.\d+\.original_name\.txt$#',$filename));
		unlink($filename);
	}

	/**
	 * @covers Wtf\Core\InputFile::store
	 * @expectedException ErrorException
	 * @expectedExceptionMessage Resource error
	 */
	public function testStoreErr1() {
		$object = new InputFile([
			'name' => 'original_name.txt',
			'type' => 'text/plain',
			'size' => 11,
			'error' => 1,
			'tmp_name' => $this->temp,
			]
		);
		$dest = sys_get_temp_dir();
		$filename = $object->store($dest,true);
	}

	/**
	 * @covers Wtf\Core\InputFile::store
	 * @expectedException ErrorException
	 * @expectedExceptionMessage Resource error
	 */
	public function testStoreErr2() {
		$object = new InputFile([
			'name' => 'original_name.txt',
			'type' => 'text/plain',
			'size' => 11,
			'error' => 0,
			'tmp_name' => 'not_existed.file',
			]
		);
		$dest = sys_get_temp_dir();
		$filename = $object->store($dest,true);
	}

	/**
	 * @covers Wtf\Core\InputFile::__get
	 */
	public function test__Get() {
		$object = new InputFile([
			'name' => 'original_name.txt',
			'type' => 'text/plain',
			'size' => 11,
			'error' => 0,
			'tmp_name' => $this->temp,
			]
		);
		
		$this->assertEquals('original_name.txt', $object->name);
		$this->assertEquals('text/plain', $object->type);
		$this->assertEquals(11, $object->size);
		$this->assertEquals(0, $object->error);
		$this->assertEquals($this->temp, $object->tmp_name);
		$this->assertNull($object->nothing);
	}

}
