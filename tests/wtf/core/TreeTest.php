<?php

namespace Wtf\Core;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-26 at 15:26:19.
 */
class TreeTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Tree
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Wtf\Core\Tree::isEmpty
	 * @covers Wtf\Core\Tree::add
	 * @covers Wtf\Core\Tree::remove
	 */
	public function testIsEmpty() {
		$object = new Tree;

		$this->assertTrue($object->isEmpty());

		$object->add(new \stdClass);
		$this->assertFalse($object->isEmpty());

		$object->remove('');
		$this->assertTrue($object->isEmpty());

		$object->add(new \stdClass, 'long/path');
		$this->assertFalse($object->isEmpty());

		$object->add(new \stdClass, 'long/other');
		$object->remove('long/path');
		$this->assertFalse($object->isEmpty());

		$object->remove('long');
		$this->assertTrue($object->isEmpty());
	}

	/**
	 * @covers Wtf\Core\Tree::isEmpty
	 * @covers Wtf\Core\Tree::add
	 */
	public function testAdd() {
		$object = new Tree;

		$object->add(new \stdClass);

		$dup = new \stdClass();
		$object->add($dup, 'branch');
		$object->add($dup, 'branch');
		$this->assertCount(1, $object->leaves('branch'));

		$object->add($dup, 'branch/subbranch');
		$this->assertCount(0, $object->leaves('branch/subbranch'));

		$object->add(true, 'branch/subbranch');
		$this->assertCount(1, $object->leaves('branch/subbranch'));
		
		$object->add(true, 'branch/subbranch');
		$this->assertCount(1, $object->leaves('branch/subbranch'));
		
		$object->add(true, 'branch');
		$this->assertCount(0, $object->leaves('branch/subbranch'));
	}

	/**
	 * @covers Wtf\Core\Tree::isEmpty
	 * @covers Wtf\Core\Tree::add
	 */
	public function testRemove() {
		$object = new Tree;

		$obj1 = new \stdClass();
		$obj2 = new \stdClass();

		$object->add($obj1, 'branch/subbranch1');
		$object->add($obj2, 'branch/subbranch2');
		$this->assertCount(2, $object->branches('branch'));

		$object->remove('branch', $obj1);
		$this->assertCount(1, $object->branches('branch'));

		$object->remove('');
		$this->assertTrue($object->isEmpty());
	}

	/**
	 * @covers Wtf\Core\Tree::leaves
	 */
	public function testLeaves() {
		$object = new Tree;

		$obj1 = new \stdClass();
		$obj2 = new \stdClass();

		$object->add($obj1, 'branch');
		$object->add($obj2, 'branch');
		$this->assertEquals([$obj1, $obj2], array_values($object->leaves('branch')));
	}

	/**
	 * @covers Wtf\Core\Tree::branches
	 */
	public function testBranches() {
		$object = new Tree;

		$obj1 = new \stdClass();
		$obj2 = new \stdClass();

		$object->add($obj1, 'branch/q1');
		$object->add($obj2, 'branch/q2');
		$this->assertCount(2, $object->branches('branch'));
		$this->assertArrayHasKey('q1', $object->branches('branch'));
		$this->assertArrayHasKey('q2', $object->branches('branch'));
	}

	/**
	 * @covers Wtf\Core\Tree::each
	 */
	public function testEach() {
		$object = new Tree;

		$obj[0] = new \stdClass();
		$obj[1] = new \stdClass();
		$obj[2] = new \stdClass();

		$object->add($obj[0]);
		$object->add($obj[1], 'branch/sub');
		$object->add($obj[2], 'branch/sub');
		
		$cnt = 0;
		$this->assertSame($object, $object->each(function($leaf) use($obj,&$cnt) {
			$this->assertSame($leaf, $obj[0]);
			$cnt++;
			return true;
		}));
		$this->assertEquals(1, $cnt);
		
		$cnt = 0;
		$this->assertSame($object, $object->each(function($leaf) use($obj,&$cnt) {
			$this->assertSame($leaf, $obj[0]);
			$cnt++;
			return true;
		},'branch'));
		$this->assertEquals(1, $cnt);
		
		$cnt = 0;
		$this->assertSame($object, $object->each(function($leaf) use($obj,&$cnt) {
			$this->assertContains($leaf, $obj);
			$cnt++;
			return true;
		},'branch/sub'));
		$this->assertEquals(3, $cnt);
		
		$cnt = 0;
		$this->assertSame($object, $object->each(function($leaf) use($obj,&$cnt) {
			return $cnt++ != 1;
		},'branch/sub'));
		$this->assertEquals(3, $cnt);
		$this->assertNotContains($obj[1], $object->leaves('branch/sub'));
	}

	/**
	 * @covers Wtf\Core\Tree::all
	 */
	public function testAll() {
		$object = new Tree;

		$obj[0] = new \stdClass();
		$obj[1] = new \stdClass();
		$obj[2] = new \stdClass();

		$object->add($obj[0]);
		$object->add($obj[1], 'branch/sub');
		$object->add($obj[2], 'branch/sub');
		
		$cnt = 0;
		$this->assertSame($object, $object->all(function($leaf) use($obj,&$cnt) {
			$this->assertContains($leaf, $obj);
			$cnt++;
			return true;
		}));
		$this->assertEquals(3, $cnt);
		
		$cnt = 0;
		$this->assertContains($obj[1], $object->leaves('branch/sub'));
		$this->assertSame($object, $object->all(function($leaf) use($obj,&$cnt) {
			$cnt++;
			return $leaf != $obj[1];
		}));
		$this->assertEquals(3, $cnt);
		$this->assertNotContains($obj[1], $object->leaves('branch/sub'));
	}

}
