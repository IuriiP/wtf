<?php

namespace Wtf\Core;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-27 at 10:15:56.
 */
class ConfigTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Config
	 */
	protected $object;

	private $fixture = __DIR__ . DIRECTORY_SEPARATOR . 'fixtures' . DIRECTORY_SEPARATOR . 'config';

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Wtf\Core\Config::singleton
	 */
	public function testSingleton() {
		$this->object = Config::singleton($this->fixture);

		$this->assertSame($this->object, Config::singleton());
	}

	/**
	 * @covers Wtf\Core\Config::__construct
	 */
	public function test__construct() {
		$this->object = new Config();

		$this->assertNotSame($this->object, Config::singleton());
		$this->assertEmpty((array) $this->object->getIterator());

		return $this->object;
	}

	/**
	 * @covers Wtf\Core\Config::load
	 * @depends test__construct
	 */
	public function testLoad($object) {
		$this->assertNull($object['php']);

		$object->load($this->fixture);

		$this->assertNull($object['nothing']);
		$this->assertNull($object['css']);
		$this->assertInstanceOf('\\Wtf\\Core\\Config', $object['ini']);
		$this->assertInstanceOf('\\Wtf\\Core\\Config', $object['json']);
		$this->assertInstanceOf('\\Wtf\\Core\\Config', $object['php']);
		$this->assertInstanceOf('\\Wtf\\Core\\Config', $object['xml']);

		return $object;
	}

	/**
	 * @covers Wtf\Core\Config::offsetGet
	 * @depends testLoad
	 */
	public function testOffsetGet($object) {
		$dir = $object['dir'];
		$this->assertInstanceOf('\\Wtf\\Core\\Config', $dir);

		$php = $dir['php'];
		$this->assertInstanceOf('\\Wtf\\Core\\Config', $php);

		$this->assertAttributeEmpty('_container', $php);
		$string = $php['string'];
		$this->assertAttributeNotEmpty('_container', $php);

		return $object;
	}

	/**
	 * @covers Wtf\Core\Config::_load
	 * @depends testOffsetGet
	 */
	public function test_php($object) {
		$php = $object['php'];

		$this->assertEquals('ONE', $php['string']);
		$this->assertInstanceOf('stdClass', $php['object']);
		$this->assertInternalType('array', $php['array']);
		$this->assertEquals($_SERVER['SCRIPT_FILENAME'], $php['indirect']);
		$this->assertNull($php['nothing']);

		return $object;
	}

	/**
	 * @covers Wtf\Core\Config::_load
	 * @depends testOffsetGet
	 */
	public function test_ini($object) {
		$ini = $object['ini'];

		$this->assertEquals('string', $ini['string']);
		$this->assertEquals('string with spaces', $ini['spaced']);
		$this->assertEquals(1, $ini['bool']);
		$this->assertEquals(999, $ini['number']);
		$this->assertEquals(['key' => 'value', 'otherkey' => 'othervalue'], $ini['section']);
		$this->assertNull($ini['nothing']);

		return $object;
	}

	/**
	 * @covers Wtf\Core\Config::_load
	 * @depends testOffsetGet
	 */
	public function test_json($object) {
		$json = $object['json'];

		$this->assertEquals('json', $json['format']);
		$this->assertEquals('IuriiP <hardwork.mouse@gmail.com>', $json['name']);
		$this->assertEquals([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], $json['array']);
		$this->assertNull($json['nothing']);

		return $object;
	}

	/**
	 * @covers Wtf\Core\Config::_load
	 * @depends testOffsetGet
	 */
	public function test_xml($object) {
		$xml = $object['xml'];
		$xml['load'];
		var_dump($xml);

		$this->assertEquals('some text', $xml['text']);
		$this->assertEquals(['first' => "ONE", 'second' => "TWO"], $xml['complex']);

		$this->assertEquals(["duplicated 0", "duplicated 1", "duplicated 2", "duplicated 3", "duplicated 4"], $xml['dup']);

		$this->assertNull($xml['nothing']);

		return $object;
	}

}
