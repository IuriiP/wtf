<?php

namespace Wtf\Core;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-02-17 at 08:28:15.
 */
class CookieTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Cookie
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = Cookie::singleton();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Wtf\Core\Cookie::singleton
	 */
	public function testSingleton() {
		$object = Cookie::singleton();
		$this->assertSame($this->object, $object);

		return $object;
	}

	/**
	 * @depends testSingleton
	 * @runInSeparateProcess
	 * @covers Wtf\Core\Cookie::offsetSet
	 * @covers Wtf\Core\Cookie::offsetGet
	 * @covers Wtf\Core\Cookie::offsetExists
	 * @expectedException ErrorException
	 * @expectedExceptionMessage Wrong arguments
	 */
	public function testOffsetSet($object) {
		$object['simple'] = 42;
		$this->assertTrue(isset($object['simple']));
		$this->assertEquals(42,$object['simple']);

		$object['uncorrect Cookie.name/used;[here]'] = 'line';
		$this->assertTrue(isset($object['uncorrect_Cookie.name/used_[here]']));
		$this->assertEquals('line',$object['uncorrect Cookie.name/used,[here]']);

		$object['complex'] = [
			'value' => 'foo',
			'domain' => 'example.com',
		];
		$this->assertTrue(isset($object['complex']));
		$this->assertEquals('foo',$object['complex']);

		$object['object'] = new \stdClass();
	}

	/**
	 * @depends testSingleton
	 * @covers Wtf\Core\Cookie::offsetUnset
	 */
	public function testOffsetUnset() {
		$object['foo'] = 'bar';
		$this->assertTrue(isset($object['foo']));

		unset($object['foo']);
		$this->assertFalse(isset($object['foo']));
	}

}
