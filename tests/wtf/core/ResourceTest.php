<?php

namespace Wtf\Core;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-02-17 at 13:27:21.
 */
class ResourceTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Resource
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * Check interfaces
	 */
	public function testImplements() {
		$ref = new \ReflectionClass(Resource::class);
		$this->assertTrue($ref->isAbstract());
		$this->assertTrue($ref->implementsInterface(\Wtf\Interfaces\AdaptiveFactory::class));
		$this->assertTrue($ref->implementsInterface(\Wtf\Interfaces\Factory::class));
		$this->assertTrue($ref->implementsInterface(\Wtf\Interfaces\Resource::class));
	}

	/**
	 * @covers Wtf\Core\Resource::_parseUrl
	 */
	public function testParser() {
		$ref = new \ReflectionClass(Resource::class);
		$parser = $ref->getMethod('_parseUrl');

		$this->assertTrue($parser->isFinal());
		$this->assertTrue($parser->isPrivate());
		$this->assertTrue($parser->isStatic());

		$parser->setAccessible(true);
		return $parser;
	}

	/**
	 * @depends testParser
	 * @param type $param
	 */
	public function testParserErr($parser) {
		$this->assertEquals([
			'scheme' => ['none'],
			'path' => '',
			'options' => [],
			'data' => ''
			], $parser->invoke(null, '%??'));
	}

	/**
	 * @depends testParser
	 * @param type $param
	 */
	public function testParserFileName($parser) {
		$this->assertEquals([
			'scheme' => ['file'],
			'path' => 'filename',
			'options' => [],
			'data' => ''
			], $parser->invoke(null, 'filename'));
	}

	/**
	 * @depends testParser
	 * @param type $param
	 */
	public function testParserFileData($parser) {
		$this->assertEquals([
			'scheme' => ['file'],
			'path' => 'filename',
			'options' => [],
			'data' => 'goo=42'
			], $parser->invoke(null, 'filename?goo=42'));
	}

	/**
	 * @depends testParser
	 * @param type $param
	 */
	public function testParserPathData($parser) {
		$this->assertEquals([
			'scheme' => ['file'],
			'path' => '\\path\\filename',
			'options' => [],
			'data' => 'goo=42'
			], $parser->invoke(null, '\\path\\filename?goo=42'));
	}

	/**
	 * @depends testParser
	 * @param type $param
	 */
	public function testParserScheme($parser) {
		$this->assertEquals([
			'scheme' => ['bar'],
			'path' => 'path/filename',
			'options' => [],
			'data' => 'goo=42'
			], $parser->invoke(null, 'bar://path/filename?goo=42'));
	}

	/**
	 * @depends testParser
	 * @param type $param
	 */
	public function testParserSchemes2($parser) {
		$this->assertEquals([
			'scheme' => ['foo','bar'],
			'path' => 'path/filename',
			'options' => [],
			'data' => 'goo=42'
			], $parser->invoke(null, 'foo:bar://path/filename?goo=42'));
	}

	/**
	 * @depends testParser
	 * @param type $param
	 */
	public function testParserUser($parser) {
		$this->assertEquals([
			'scheme' => ['foo','bar'],
			'path' => 'path/filename',
			'options' => ['username' => 'username'],
			'data' => 'goo=42'
			], $parser->invoke(null, 'foo:bar://username@path/filename?goo=42'));
	}

	/**
	 * @depends testParser
	 * @param type $param
	 */
	public function testParserCreds($parser) {
		$this->assertEquals([
			'scheme' => ['foo','bar'],
			'path' => '/path/filename',
			'options' => ['username' => 'username', 'password'=>'pass'],
			'data' => 'goo=42'
			], $parser->invoke(null, 'foo:bar://username:pass@/path/filename?goo=42'));
	}

	/**
	 * @depends testParser
	 * @param type $param
	 */
	public function testParserRealName($parser) {
		$this->assertEquals([
			'scheme' => ['file'],
			'path' => $_SERVER['SCRIPT_FILENAME'],
			'options' => [],
			'data' => ''
			], $parser->invoke(null, $_SERVER['SCRIPT_FILENAME']));
	}

	/**
	 * @covers Wtf\Core\Resource::produce
	 * @todo   Implement testProduce().
	 */
	public function testProduce() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Wtf\Core\Resource::factory
	 * @todo   Implement testFactory().
	 */
	public function testFactory() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Wtf\Core\Resource::make
	 * @todo   Implement testMake().
	 */
	public function testMake() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Wtf\Core\Resource::__callStatic
	 * @todo   Implement test__callStatic().
	 */
	public function test__callStatic() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Wtf\Core\Resource::guess
	 * @todo   Implement testGuess().
	 */
	public function testGuess() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

}
