<?php

namespace Wtf\Core;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-27 at 10:09:52.
 */
class EventTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Event
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Wtf\Core\Event::_
	 */
	public function testBuilder() {
		$event = Event::_('some/event');

		$this->assertInstanceOf(Event::class, $event);
		$this->assertEquals('some/event', $event->name);
		$this->assertEquals([
			'function' => __FUNCTION__,
			'class' => __CLASS__,
			'type' => '->',
			], $event->source);
		$this->assertEquals(0, $event->time);
		$this->assertNull($event->message);
		$this->assertNull($event->type);
		$this->assertNull($event->data);

		$this->assertInstanceOf(Event::class, $event->message('MesSsage'));
		$this->assertEquals(['MesSsage'], $event->message);
		$this->assertInstanceOf(Event::class, $event->type(Event::MESSAGE));
		$this->assertEquals([Event::MESSAGE], $event->type);
		$this->assertInstanceOf(Event::class, $event->data('the data'));
		$this->assertEquals(['the data'], $event->data);

		return $event;
	}

	/**
	 * @covers Wtf\Core\Event::fire
	 * @depends testBuilder
	 */
	public function testFire($event) {
		// need preregister linked objects
		$manager = EventManager::singleton();
		$observer = $this->getMockForAbstractClass(Observer::class);
		$record = new \stdClass();
		$observer->expects($this->any())
			->method('onEvent')
			->will($this->returnCallback(function() use($record) {
					$record->name = 'onEvent';
					$record->args = func_get_args();
				}));

		$manager->add($observer, 'some');

		$this->assertInstanceOf(Event::class, $event->fire());
		$this->assertInternalType('double', $event->time);

		$this->assertEquals('onEvent', $record->name);
		$this->assertSame($event, $record->args[0]);
		$this->assertEquals(['some', 'event'], $record->args[1]);
	}

}
