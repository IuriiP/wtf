<?php

namespace Wtf\Core;

class PseudoControllerMock {

	public function __construct() {
		
	}

	public function __call($name, $arguments) {
		return [
			'class' => static::class,
			'function' => trim($name, '_'),
			'arguments' => $arguments[0],
		];
	}

}

class PseudoControllerMockTest extends PseudoControllerMock {
	
}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-02-17 at 15:37:25.
 */
class RuleTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Rule
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Wtf\Core\Rule::_
	 */
	public function test_() {
		$object = Rule::_('any', 'foo/{some}/{value}', 'callback');
		$this->assertInstanceOf(Rule::class, $object);
		$ref = new \ReflectionObject($object);
		/*
		  private $_methods = [];
		  private $_pattern = null;
		  private $_callback = null;
		  private $_mapper = [];
		  private $_group = [];
		 */
		$methods = $ref->getProperty('_methods');
		$methods->setAccessible(true);
		$this->assertNull($methods->getValue($object));

		$group = $ref->getProperty('_group');
		$group->setAccessible(true);
		$this->assertEquals([], $group->getValue($object));

		$pattern = $ref->getProperty('_pattern');
		$pattern->setAccessible(true);
		$this->assertEquals('foo/(\w+)/(\w+)', $pattern->getValue($object));

		$callback = $ref->getProperty('_callback');
		$callback->setAccessible(true);
		$this->assertEquals('callback', $callback->getValue($object));

		$mapper = $ref->getProperty('_mapper');
		$mapper->setAccessible(true);
		$this->assertEquals(['_', 'some', 'value'], $mapper->getValue($object));
	}

	/**
	 * @covers Wtf\Core\Rule::group
	 */
	public function testGroup() {
		$object = Rule::group('any', 'foo/{some:[0-9]+}/{value}', [
				'rule'
				], 'callback');
		$this->assertInstanceOf(Rule::class, $object);
		$ref = new \ReflectionObject($object);
		/*
		  private $_methods = [];
		  private $_pattern = null;
		  private $_callback = null;
		  private $_mapper = [];
		  private $_group = [];
		 */
		$methods = $ref->getProperty('_methods');
		$methods->setAccessible(true);
		$this->assertNull($methods->getValue($object));

		$group = $ref->getProperty('_group');
		$group->setAccessible(true);
		$this->assertEquals(['rule'], $group->getValue($object));

		$pattern = $ref->getProperty('_pattern');
		$pattern->setAccessible(true);
		$this->assertEquals('foo/([0-9]+)/(\w+)', $pattern->getValue($object));

		$callback = $ref->getProperty('_callback');
		$callback->setAccessible(true);
		$this->assertEquals('callback', $callback->getValue($object));

		$mapper = $ref->getProperty('_mapper');
		$mapper->setAccessible(true);
		$this->assertEquals(['_', 'some', 'value'], $mapper->getValue($object));
	}

	/**
	 * @covers Wtf\Core\Rule::__callStatic
	 * @expectedException ErrorException
	 * @expectedExceptionMessage arguments list
	 */
	public function testStatic() {
		$ref = new \ReflectionClass(Rule::class);
		$const = $ref->getProperty('_allowed');
		$const->setAccessible(true);
		$allowed = $const->getValue();
		$this->assertEquals(['get', 'put', 'patch', 'post', 'delete'], $allowed);

		foreach($allowed as $value) {
			$object = Rule::$value('foo');
			$ref = new \ReflectionObject($object);
			$methods = $ref->getProperty('_methods');
			$methods->setAccessible(true);
			$this->assertEquals([$value], $methods->getValue($object));
		}

		$object = Rule::disable('foo');
	}

	/**
	 * @covers Wtf\Core\Rule::find
	 */
	public function testFind() {
		$fixture = [
			Rule::group(['get', 'put'], '{Foo}/{Bar}', [
				// >=2 elements
				Rule::get('/{baz}', 'Wtf\Core\PseudoControllerMock{Foo}::{method}{Bar}_{baz}'),
				Rule::put('', 'Wtf\Core\PseudoControllerMock{Foo}::{method}{Bar}'),
				], PseudoControllerMock::class . '::default'),
			Rule::group(['post', 'delete'], '{foo}', [
				// >=2 elements
				Rule::delete('-{bar:[0-9]+}', 'Wtf\Core\PseudoControllerMock::{foo}_{bar}'),
				Rule::post('/{bar}', 'Wtf\Core\PseudoControllerMock::{foo}_POST_{bar}'),
				], PseudoControllerMock::class . '::default'),
			Rule::group('any', '/{foo}', [
				// 1 element
				Rule::any('/', PseudoControllerMock::class . '::{foo}')
				], PseudoControllerMock::class . '::default'),
		];

		return $fixture;
	}

	/**
	 * @depends testFind
	 * @covers Wtf\Core\Rule::find
	 * @covers Wtf\Core\Rule::
	 */
	public function testFind1($fixture) {
		$params = [
			'input' => 'string',
			'data' => 42,
		];

		$found = Rule::find($fixture, 'test/where/found/me', 'get', $params);
		$this->assertInstanceOf(Rule::class, $found);

		$this->assertAttributeEquals('/{baz}', '_original', $found);
		$this->assertAttributeEquals(['get'], '_methods', $found);
		$this->assertAttributeEquals('/(\w+)', '_pattern', $found);
		$this->assertAttributeEquals('Wtf\Core\PseudoControllerMock{Foo}::{method}{Bar}_{baz}', '_callback', $found);
		$this->assertAttributeEquals([
			'_',
			'baz'
			], '_mapper', $found);
		$this->assertAttributeEmpty('_group', $found);
		$this->assertAttributeEquals([
			'Foo' => 'test',
			'Bar' => 'where',
			'baz' => 'found',
			'_' => '/me',
			'input' => 'string',
			'data' => 42,
			], '_params', $found);
	}

	/**
	 * @depends testFind
	 * @covers Wtf\Core\Rule::find
	 */
	public function testFind2($fixture) {
		$params = [
			'input' => 'string',
			'data' => 42,
		];

		$found = Rule::find($fixture, 'test/where/found/me', 'put', $params);
		$this->assertInstanceOf(Rule::class, $found);

		$this->assertAttributeEquals('', '_original', $found);
		$this->assertAttributeEquals(['put'], '_methods', $found);
		$this->assertAttributeEquals('', '_pattern', $found);
		$this->assertAttributeEquals('Wtf\Core\PseudoControllerMock{Foo}::{method}{Bar}', '_callback', $found);
		$this->assertAttributeEquals([
			'_',
			], '_mapper', $found);
		$this->assertAttributeEmpty('_group', $found);
		$this->assertAttributeEquals([
			'Foo' => 'test',
			'Bar' => 'where',
			'_' => '/found/me',
			'input' => 'string',
			'data' => 42,
			], '_params', $found);
	}

	/**
	 * @depends testFind
	 * @covers Wtf\Core\Rule::find
	 */
	public function testFind3($fixture) {
		$params = [
			'input' => 'string',
			'data' => 42,
		];


		$found = Rule::find($fixture, 'test/where', 'get', $params);
		$this->assertInstanceOf(Rule::class, $found);

		$this->assertAttributeEquals('{Foo}/{Bar}', '_original', $found);
		$this->assertAttributeEquals(['get','put'], '_methods', $found);
		$this->assertAttributeEquals('(\w+)/(\w+)', '_pattern', $found);
		$this->assertAttributeEquals('Wtf\Core\PseudoControllerMock::default', '_callback', $found);
		$this->assertAttributeEquals([
			'_',
			'Foo',
			'Bar',
			], '_mapper', $found);
		$this->assertAttributeNotEmpty('_group', $found);
		$this->assertAttributeEquals([
			'Foo' => 'test',
			'Bar' => 'where',
			'_' => '',
			'input' => 'string',
			'data' => 42,
			], '_params', $found);
	}

	/**
	 * @depends testFind
	 * @covers Wtf\Core\Rule::find
	 */
	public function testFind4($fixture) {
		$params = [
			'input' => 'string',
			'data' => 42,
		];

		$found = Rule::find($fixture, 'some-42/23', 'delete', $params);
		$this->assertInstanceOf(Rule::class, $found);

		$this->assertAttributeEquals('-{bar:[0-9]+}', '_original', $found);
		$this->assertAttributeEquals(['delete'], '_methods', $found);
		$this->assertAttributeEquals('-([0-9]+)', '_pattern', $found);
		$this->assertAttributeEquals('Wtf\Core\PseudoControllerMock::{foo}_{bar}', '_callback', $found);
		$this->assertAttributeEquals([
			'_',
			'bar',
			], '_mapper', $found);
		$this->assertAttributeEmpty('_group', $found);
		$this->assertAttributeEquals([
			'foo' => 'some',
			'bar' => '42',
			'_' => '/23',
			'input' => 'string',
			'data' => 42,
			], '_params', $found);
	}

	/**
	 * @depends testFind
	 * @covers Wtf\Core\Rule::find
	 */
	public function testFind5($fixture) {
		$params = [
			'input' => 'string',
			'data' => 42,
		];

		$found = Rule::find($fixture, 'some/thing/23', 'post', $params);
		$this->assertInstanceOf(Rule::class, $found);

		$this->assertAttributeEquals('/{bar}', '_original', $found);
		$this->assertAttributeEquals(['post'], '_methods', $found);
		$this->assertAttributeEquals('/(\w+)', '_pattern', $found);
		$this->assertAttributeEquals('Wtf\Core\PseudoControllerMock::{foo}_POST_{bar}', '_callback', $found);
		$this->assertAttributeEquals([
			'_',
			'bar',
			], '_mapper', $found);
		$this->assertAttributeEmpty('_group', $found);
		$this->assertAttributeEquals([
			'foo' => 'some',
			'bar' => 'thing',
			'_' => '/23',
			'input' => 'string',
			'data' => 42,
			], '_params', $found);
	}

	/**
	 * @depends testFind
	 * @covers Wtf\Core\Rule::find
	 */
	public function testFind6($fixture) {
		$params = [
			'input' => 'string',
			'data' => 42,
		];

		$found = Rule::find($fixture, 'some/thing/23', 'delete', $params);
		$this->assertInstanceOf(Rule::class, $found);

		$this->assertAttributeEquals('{foo}', '_original', $found);
		$this->assertAttributeEquals(['post','delete'], '_methods', $found);
		$this->assertAttributeEquals('(\w+)', '_pattern', $found);
		$this->assertAttributeEquals('Wtf\Core\PseudoControllerMock::default', '_callback', $found);
		$this->assertAttributeEquals([
			'_',
			'foo',
			], '_mapper', $found);
		$this->assertAttributeNotEmpty('_group', $found);
		$this->assertAttributeEquals([
			'foo' => 'some',
			'_' => '/thing/23',
			'input' => 'string',
			'data' => 42,
			], '_params', $found);
	}

	/**
	 * @depends testFind
	 * @covers Wtf\Core\Rule::find
	 */
	public function testFind7($fixture) {
		$params = [
			'input' => 'string',
			'data' => 42,
		];

		$found = Rule::find($fixture, '/some/', 'patch', $params);
		$this->assertInstanceOf(Rule::class, $found);

		$this->assertAttributeEquals('/', '_original', $found);
		$this->assertAttributeEmpty('_methods', $found);
		$this->assertAttributeEquals('/', '_pattern', $found);
		$this->assertAttributeEquals('Wtf\Core\PseudoControllerMock::{foo}', '_callback', $found);
		$this->assertAttributeEquals([
			'_',
			], '_mapper', $found);
		$this->assertAttributeEmpty('_group', $found);
		$this->assertAttributeEquals([
			'foo' => 'some',
			'_' => '',
			'input' => 'string',
			'data' => 42,
			], '_params', $found);
	}

	/**
	 * @depends testFind
	 * @covers Wtf\Core\Rule::find
	 */
	public function testFind8($fixture) {
		$params = [
			'input' => 'string',
			'data' => 42,
		];

		$found = Rule::find($fixture, '000/some/', 'patch', $params);
		$this->assertNull($found);
	}

	/**
	 * @depends testFind
	 * @covers Wtf\Core\Rule::find
	 * @expectedException ErrorException
	 * @expectedExceptionMessage arguments list
	 */
	public function testFindErr1($fixture) {
		Rule::find($fixture, '/some', '', []);
	}

	/**
	 * @depends testFind
	 * @covers Wtf\Core\Rule::find
	 * @expectedException ErrorException
	 * @expectedExceptionMessage arguments list
	 */
	public function testFindErr2($fixture) {
		Rule::find($fixture, '/some', 'replace', []);
	}

	/**
	 * @depends testFind
	 * @covers Wtf\Core\Rule::find
	 */
	public function testFindErr3($fixture) {
		$params = [
			'input' => 'string',
			'data' => 42,
		];

		$this->assertNull(Rule::find($fixture, '#$some/where/found/me', 'get', $params));
	}

}
