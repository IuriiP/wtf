<?php

namespace Wtf\Core;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-27 at 10:15:57.
 */
class AppTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var App
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = App::singleton();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Wtf\Core\App::contract
	 */
	public function testContract() {
		$obj = new \stdClass();
		$other = new \stdClass();
		$this->assertSame($obj, App::contract('contracted', $obj));
		$this->assertSame($obj, App::contract('contracted', $other));
		$this->assertSame($other, App::contract('another', $other));
	}

	/**
	 * @covers Wtf\Core\App::startTimer
	 * @covers Wtf\Core\App::getTimer
	 * @covers Wtf\Core\App::getTimerTotal
	 */
	public function testTimer() {
		// check property
		$timeref = new \ReflectionProperty(App::class,'_timer_stack');
		$this->assertTrue($timeref->isPrivate());
		$this->assertTrue($timeref->isStatic());
		$timeref->setAccessible(true);
		$this->assertEmpty($timeref->getValue());
		// check start
		$start = App::startTimer();
		$stack = $timeref->getValue();
		$this->assertCount(1,$stack);
		$this->assertInternalType('double',$stack[0]);
		$this->assertEquals($start,$stack[0]);
		// append control point
		App::startTimer();
		$this->assertCount(2,$timeref->getValue());
		// check non-destructive access
		$total = App::getTimerTotal();
		$this->assertInternalType('double',$total);
		$this->assertCount(2,$timeref->getValue());
		// check destructive access
		$middle = App::getTimer();
		$this->assertInternalType('double',$middle);
		$this->assertCount(1,$timeref->getValue());
		// check internal point is lesser then external point
		$this->assertGreaterThan($middle,App::getTimer());
		// check if stack is empty
		$this->assertEmpty($timeref->getValue());
	}

	/**
	 * @covers Wtf\Core\App::run
	 * @todo   Implement testRun().
	 */
	public function testRun() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

}
