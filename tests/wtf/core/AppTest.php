<?php

namespace Wtf\Core;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-02-17 at 15:43:43.
 */
class AppTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var App
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = App::singleton();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Wtf\Core\App::singleton
	 */
	public function testSingleton() {
		$object = App::singleton();
		$this->assertSame($this->object, $object);

		return $object;
	}

	/**
	 * @covers Wtf\Core\App::startTimer
	 * @covers Wtf\Core\App::getTimer
	 * @covers Wtf\Core\App::getTimerTotal
	 */
	public function testTimer() {
		App::startTimer();
		sleep(1);
		$point = App::getTimerTotal();
		$this->assertInternalType('float', $point);
		$this->assertTrue($point < App::getTimer());
		$this->assertTrue(App::getTimerTotal() > 1487348101);
	}

	/**
	 * @depends testSingleton
	 * @covers Wtf\Core\App::contract
	 * @covers Wtf\Core\App::__isset
	 * @covers Wtf\Core\App::__get
	 * @covers Wtf\Core\App::__set
	 * @expectedException ErrorException
	 * @expectedExceptionMessage readonly
	 */
	public function testContract($object) {
		$this->assertFalse(isset($object->foo));
		$object->contract('foo', 'bar');
		$this->assertTrue(isset($object->foo));
		$this->assertEquals('bar', $object->foo);
		$object->foo = 'baz';
	}

	/**
	 * @depends testSingleton
	 * @covers Wtf\Core\App::__unset
	 * @expectedException ErrorException
	 * @expectedExceptionMessage readonly
	 */
	public function testUnset($object) {
		unset($object->foo);
	}

	/**
	 * @depends testSingleton
	 * @covers Wtf\Core\App::__call
	 * @covers Wtf\Core\App::__callStatic
	 * @expectedException ErrorException
	 * @expectedExceptionMessage not available
	 */
	public function testCalling($object) {
		$object->contract('foo', 'bar');
		$this->assertEquals('bar', $object->foo());
		$this->assertEquals('bar', App::foo());
		$this->assertNull($object->bar());
		$this->assertNull(App::bar());
		$object->foo('bar');
	}

	/**
	 * @covers Wtf\Core\App::x_debug
	 * @covers Wtf\Core\App::x_echo
	 */
	public function testX_debug() {
		$foo = 'bar';
		App::x_debug($foo, 'Foo');
		$this->assertEquals("Foo:
'bar'",  ob_get_clean());

		App::x_echo('Foobar');
		$this->assertEquals('Foobar',  ob_get_clean());
	}

	/**
	 * @covers Wtf\Core\App::run
	 * @todo   Implement testRun().
	 */
	public function testRun() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

}
